// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (created_at, updated_at, title, url, user_id)
VALUES (
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
RETURNING id, created_at, updated_at, title, url, user_id, last_feed_at
`

type CreateFeedParams struct {
	Title  string
	Url    string
	UserID int32
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Title, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.UserID,
		&i.LastFeedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, created_at, updated_at, title, url, user_id, last_feed_at FROM feeds WHERE user_id = $1
`

func (q *Queries) GetFeeds(ctx context.Context, userID int32) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.UserID,
			&i.LastFeedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsWithUsername = `-- name: GetFeedsWithUsername :many
SELECT f.id, f.created_at, f.updated_at, f.title, f.url, f.user_id, f.last_feed_at, u.id, u.created_at, u.updated_at, u.name
FROM feeds AS f
JOIN users AS u ON f.user_id = u.id
`

type GetFeedsWithUsernameRow struct {
	ID          int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	UserID      int32
	LastFeedAt  sql.NullTime
	ID_2        int32
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	Name        string
}

func (q *Queries) GetFeedsWithUsername(ctx context.Context) ([]GetFeedsWithUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUsernameRow
	for rows.Next() {
		var i GetFeedsWithUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.UserID,
			&i.LastFeedAt,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, url
FROM feeds
ORDER BY last_feed_at NULLS FIRST
LIMIT 1
`

type GetNextFeedToFetchRow struct {
	ID  int32
	Url string
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GetNextFeedToFetchRow
	err := row.Scan(&i.ID, &i.Url)
	return i, err
}

const markFeedAsFetched = `-- name: MarkFeedAsFetched :exec
UPDATE feeds
SET last_feed_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkFeedAsFetched(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markFeedAsFetched, id)
	return err
}
