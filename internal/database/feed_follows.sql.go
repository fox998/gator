// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH 
feed AS (SELECT id, created_at, updated_at, title, url, user_id, last_feed_at FROM feeds WHERE url = $1),
follower AS (SELECT id, created_at, updated_at, name FROM users WHERE name = $2),
inserted AS (
    INSERT INTO feed_follows (created_at, updated_at, feed_id, user_id)
    VALUES (NOW(), NOW(), (SELECT id FROM feed), (SELECT id FROM follower))
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT feed.title, feed.url, follower.name AS follower_name
FROM inserted 
JOIN feed ON inserted.feed_id = feed.id
JOIN follower ON inserted.user_id = follower.id
`

type CreateFeedFollowParams struct {
	Url  string
	Name string
}

type CreateFeedFollowRow struct {
	Title        string
	Url          string
	FollowerName string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.Url, arg.Name)
	var i CreateFeedFollowRow
	err := row.Scan(&i.Title, &i.Url, &i.FollowerName)
	return i, err
}

const createFeedFollowIds = `-- name: CreateFeedFollowIds :one
INSERT INTO feed_follows (created_at, updated_at, feed_id, user_id)
VALUES (NOW(), NOW(), $1, $2)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreateFeedFollowIdsParams struct {
	FeedID int32
	UserID int32
}

func (q *Queries) CreateFeedFollowIds(ctx context.Context, arg CreateFeedFollowIdsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollowIds, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
WITH followed AS (
    SELECT feed_follows.feed_id AS id
    FROM feed_follows
    WHERE feed_follows.user_id = (SELECT id FROM users WHERE name = $1)
)
SELECT feeds.title, feeds.url
FROM feeds
WHERE feeds.id IN (SELECT id FROM followed)
`

type GetFeedFollowsForUserRow struct {
	Title string
	Url   string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.Title, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :exec
DELETE FROM feed_follows
WHERE user_id = (SELECT id FROM users WHERE name = $1) AND feed_id = (SELECT id FROM feeds WHERE url = $2)
`

type UnfollowFeedParams struct {
	Name string
	Url  string
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, arg.Name, arg.Url)
	return err
}
